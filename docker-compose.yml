services:
  fastapi:
    profiles: [fastapi, deploy]
    depends_on:
      mysql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    build:
      context: ./FastAPI
      dockerfile: Dockerfile
    env_file:
      - ./envs/FastAPI.env
    ports:
      - "${FAST_API_PORT}:${FAST_API_PORT}"
    volumes:
      - FastAPI_log:/FastAPI/log
      - audio_files:/shared_audio
    networks:
      - app_network
      - nginx_net

  celeryworker:
    profiles: [fastapi, deploy]
    build:
      context: ./FastAPI
      dockerfile: Dockerfile
    env_file:
      - ./envs/FastAPI.env
    command: celery -A app.celery_app:app worker --loglevel info --pool=solo
    networks:
      - app_network
    volumes:
      - audio_files:/shared_audio
    depends_on: # Redis가 준비된 후 시작하도록 의존성 추가 (권장)
      redis:
        condition: service_healthy

  backend:
    profiles: [backend, deploy]
    depends_on:
      mysql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./envs/backend.env
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - app_network
      - nginx_net
  mysql:
    build:
      context: ./db/mysql
      dockerfile: Dockerfile
    restart: always
    ports:
      - ${MYSQL_PORT}:3306
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    environment:
      TZ: Asia/Seoul
    env_file:
      - ./envs/mysql.env
    volumes:
      - ./db/mysql/data:/var/lib/mysql
      - ./db/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 10

  neo4j:
    build:
      context: ./db/neo4j
      dockerfile: Dockerfile
    restart: always
    ports:
      - ${NEO4J_BROWSER_PORT}:7474
      - ${NEO4J_PORT}:7687
    environment:
      TZ: Asia/Seoul
    env_file:
      - ./envs/neo4j.env
    volumes:
      - ./db/neo4j/logs:/logs
      - ./db/neo4j/config:/config
      - ./db/neo4j/data:/data
      - ./db/neo4j/plugins:/plugins
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:7474"]
      interval: 5s
      timeout: 5s
      retries: 100

  redis:
    image: redis:alpine
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    labels:
      - "name=redis"
      - "mode=standalone"
    environment:
      TZ: Asia/Seoul
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus_network
      - app_network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus_network
      - app_network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.6
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - milvus_network
      - app_network

volumes:
  FastAPI_log:
  audio_files:

networks:
  app_network:
    name: app_network
    driver: bridge
  nginx_net:
    name: nginx_net
    driver: bridge
  milvus_network:
    name: milvus_network
    driver: bridge
